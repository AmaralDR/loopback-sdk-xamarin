{
'models': [
{
  'name' : 'Email',
  'plural' : 'Emails',
  'base' :  'Model',
  'idInjection' : true,
  'properties' : {
        'to': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'from': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'subject': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'text': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'html': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'Number',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {

    }
},
{
  'name' : 'User',
  'plural' : 'Users',
  'base' :  '',
  'idInjection' : true,
  'properties' : {
        'realm': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'username': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'password': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'email': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'emailVerified': {     
            'type' : 'Boolean',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'verificationToken': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'accessTokens': { 'foreignKey': 'userId', 'model': 'AccessToken', 'type': 'hasMany'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__findById__accessTokens': {
          'url': ' /Users/:id/accessTokens/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for accessTokens.'
       },
        'prototype$__destroyById__accessTokens': {
          'url': ' /Users/:id/accessTokens/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for accessTokens.'
       },
        'prototype$__updateById__accessTokens': {
          'url': ' /Users/:id/accessTokens/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for accessTokens.'
       },
        'prototype$__findById__identities': {
          'url': ' /Users/:id/identities/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for identities.'
       },
        'prototype$__destroyById__identities': {
          'url': ' /Users/:id/identities/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for identities.'
       },
        'prototype$__updateById__identities': {
          'url': ' /Users/:id/identities/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for identities.'
       },
        'prototype$__findById__credentials': {
          'url': ' /Users/:id/credentials/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for credentials.'
       },
        'prototype$__destroyById__credentials': {
          'url': ' /Users/:id/credentials/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for credentials.'
       },
        'prototype$__updateById__credentials': {
          'url': ' /Users/:id/credentials/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for credentials.'
       },
        'prototype$__get__accessTokens': {
          'url': ' /Users/:id/accessTokens',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'accessTokens' : 'AccessToken',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries accessTokens of User.'
       },
        'prototype$__create__accessTokens': {
          'url': ' /Users/:id/accessTokens',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in accessTokens of this model.'
       },
        'prototype$__delete__accessTokens': {
          'url': ' /Users/:id/accessTokens',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all accessTokens of this model.'
       },
        'prototype$__count__accessTokens': {
          'url': ' /Users/:id/accessTokens/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts accessTokens of User.'
       },
        'prototype$__get__identities': {
          'url': ' /Users/:id/identities',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'identities' : 'UserIdentity',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries identities of User.'
       },
        'prototype$__create__identities': {
          'url': ' /Users/:id/identities',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in identities of this model.'
       },
        'prototype$__delete__identities': {
          'url': ' /Users/:id/identities',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all identities of this model.'
       },
        'prototype$__count__identities': {
          'url': ' /Users/:id/identities/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts identities of User.'
       },
        'prototype$__get__credentials': {
          'url': ' /Users/:id/credentials',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'credentials' : 'UserCredential',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries credentials of User.'
       },
        'prototype$__create__credentials': {
          'url': ' /Users/:id/credentials',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in credentials of this model.'
       },
        'prototype$__delete__credentials': {
          'url': ' /Users/:id/credentials',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all credentials of this model.'
       },
        'prototype$__count__credentials': {
          'url': ' /Users/:id/credentials/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts credentials of User.'
       },
        'create': {
          'url': ' /Users',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /Users',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /Users/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /Users/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /Users/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /Users/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /Users/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /Users',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'User',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /Users/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /Users/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /Users/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /Users/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /Users/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /Users/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        'login': {
          'url': ' /Users/login',
          'method': 'POST',
          'params': {
             'credentials' : {'type' : 'object', 'placement' : 'body'},
             'include' : {'type' : 'string', 'placement' : 'query'}
          },
          'returns': {
           'accessToken' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Login a user with username/email and password.'
       },
        'logout': {
          'url': ' /Users/logout',
          'method': 'POST',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Logout a user with access token.'
       },
        'prototype$verify': {
          'url': ' /Users/:id/verify',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Trigger user-s identity verification with configured verifyOptions'
       },
        'confirm': {
          'url': ' /Users/confirm',
          'method': 'GET',
          'params': {
             'uid' : {'type' : 'string', 'placement' : 'query'},
             'token' : {'type' : 'string', 'placement' : 'query'},
             'redirect' : {'type' : 'string', 'placement' : 'query'}
          },
          'returns': {
 
          },
          'description': 'Confirm a user registration with identity verification token.'
       },
        'resetPassword': {
          'url': ' /Users/reset',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'body'}
          },
          'returns': {
 
          },
          'description': 'Reset password for a user with email.'
       },
        'changePassword': {
          'url': ' /Users/change-password',
          'method': 'POST',
          'params': {
             'oldPassword' : {'type' : 'string', 'placement' : 'form'},
             'newPassword' : {'type' : 'string', 'placement' : 'form'},
          },
          'returns': {
 
          },
          'description': 'Change a user-s password.'
       },
        'setPassword': {
          'url': ' /Users/reset-password',
          'method': 'POST',
          'params': {
             'newPassword' : {'type' : 'string', 'placement' : 'form'},
          },
          'returns': {
 
          },
          'description': 'Reset user-s password via a password-reset token.'
       },
        'changePassword': {
          'url': ' /Users/changePassword',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'body'}
          },
          'returns': {
 
          },
          'description': 'Alter password for user with temporary token.'
       },
        '::get::AccessToken::user': {
          'url': ' /AccessTokens/:id/user',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'user' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation user.'
       },
        '::get::UserCredential::user': {
          'url': ' /UserCredentials/:id/user',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'user' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation user.'
       },
        '::get::UserIdentity::user': {
          'url': ' /UserIdentities/:id/user',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'user' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation user.'
       },
        '::findById::pessoa::user': {
          'url': ' /pessoas/:id/user/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for user.'
       },
        '::destroyById::pessoa::user': {
          'url': ' /pessoas/:id/user/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for user.'
       },
        '::updateById::pessoa::user': {
          'url': ' /pessoas/:id/user/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for user.'
       },
        '::link::pessoa::user': {
          'url': ' /pessoas/:id/user/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'user' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for user.'
       },
        '::unlink::pessoa::user': {
          'url': ' /pessoas/:id/user/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the user relation to an item by id.'
       },
        '::exists::pessoa::user': {
          'url': ' /pessoas/:id/user/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of user relation to an item by id.'
       },
        '::get::pessoa::user': {
          'url': ' /pessoas/:id/user',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'user' : 'User',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries user of pessoa.'
       },
        '::create::pessoa::user': {
          'url': ' /pessoas/:id/user',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in user of this model.'
       },
        '::delete::pessoa::user': {
          'url': ' /pessoas/:id/user',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all user of this model.'
       },
        '::count::pessoa::user': {
          'url': ' /pessoas/:id/user/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts user of pessoa.'
       }

    }
},
{
  'name' : 'AccessToken',
  'plural' : 'AccessTokens',
  'base' :  '',
  'idInjection' : false,
  'properties' : {
        'id': {     
            'type' : 'String',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'ttl': {     
            'type' : 'Number',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'scopes': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'created': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'userId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'user': { 'foreignKey': 'userId', 'model': 'User', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__user': {
          'url': ' /AccessTokens/:id/user',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'user' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation user.'
       },
        'create': {
          'url': ' /AccessTokens',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /AccessTokens',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /AccessTokens/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /AccessTokens/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /AccessTokens/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /AccessTokens/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /AccessTokens/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /AccessTokens',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /AccessTokens/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /AccessTokens/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /AccessTokens/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /AccessTokens/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /AccessTokens/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /AccessTokens/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::findById::User::accessTokens': {
          'url': ' /Users/:id/accessTokens/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for accessTokens.'
       },
        '::destroyById::User::accessTokens': {
          'url': ' /Users/:id/accessTokens/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for accessTokens.'
       },
        '::updateById::User::accessTokens': {
          'url': ' /Users/:id/accessTokens/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for accessTokens.'
       },
        '::get::User::accessTokens': {
          'url': ' /Users/:id/accessTokens',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'accessTokens' : 'AccessToken',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries accessTokens of User.'
       },
        '::create::User::accessTokens': {
          'url': ' /Users/:id/accessTokens',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'AccessToken',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in accessTokens of this model.'
       },
        '::delete::User::accessTokens': {
          'url': ' /Users/:id/accessTokens',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all accessTokens of this model.'
       },
        '::count::User::accessTokens': {
          'url': ' /Users/:id/accessTokens/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts accessTokens of User.'
       }

    }
},
{
  'name' : 'UserCredential',
  'plural' : 'UserCredentials',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'provider': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'authScheme': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'externalId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'profile': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'credentials': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'created': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'modified': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'userId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'user': { 'foreignKey': 'userId', 'model': 'User', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__user': {
          'url': ' /UserCredentials/:id/user',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'user' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation user.'
       },
        'create': {
          'url': ' /UserCredentials',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /UserCredentials',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /UserCredentials/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /UserCredentials/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /UserCredentials/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /UserCredentials/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /UserCredentials/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /UserCredentials',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /UserCredentials/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /UserCredentials/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /UserCredentials/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /UserCredentials/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /UserCredentials/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /UserCredentials/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::findById::User::credentials': {
          'url': ' /Users/:id/credentials/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for credentials.'
       },
        '::destroyById::User::credentials': {
          'url': ' /Users/:id/credentials/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for credentials.'
       },
        '::updateById::User::credentials': {
          'url': ' /Users/:id/credentials/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for credentials.'
       },
        '::get::User::credentials': {
          'url': ' /Users/:id/credentials',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'credentials' : 'UserCredential',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries credentials of User.'
       },
        '::create::User::credentials': {
          'url': ' /Users/:id/credentials',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserCredential',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in credentials of this model.'
       },
        '::delete::User::credentials': {
          'url': ' /Users/:id/credentials',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all credentials of this model.'
       },
        '::count::User::credentials': {
          'url': ' /Users/:id/credentials/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts credentials of User.'
       }

    }
},
{
  'name' : 'UserIdentity',
  'plural' : 'UserIdentities',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'provider': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'authScheme': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'externalId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'profile': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'credentials': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'created': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'modified': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'userId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'user': { 'foreignKey': 'userId', 'model': 'User', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__user': {
          'url': ' /UserIdentities/:id/user',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'user' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation user.'
       },
        'create': {
          'url': ' /UserIdentities',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /UserIdentities',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /UserIdentities/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /UserIdentities/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /UserIdentities/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /UserIdentities/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /UserIdentities/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /UserIdentities',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /UserIdentities/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /UserIdentities/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /UserIdentities/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /UserIdentities/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /UserIdentities/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /UserIdentities/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::findById::User::identities': {
          'url': ' /Users/:id/identities/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for identities.'
       },
        '::destroyById::User::identities': {
          'url': ' /Users/:id/identities/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for identities.'
       },
        '::updateById::User::identities': {
          'url': ' /Users/:id/identities/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for identities.'
       },
        '::get::User::identities': {
          'url': ' /Users/:id/identities',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'identities' : 'UserIdentity',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries identities of User.'
       },
        '::create::User::identities': {
          'url': ' /Users/:id/identities',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'UserIdentity',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in identities of this model.'
       },
        '::delete::User::identities': {
          'url': ' /Users/:id/identities',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all identities of this model.'
       },
        '::count::User::identities': {
          'url': ' /Users/:id/identities/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts identities of User.'
       }

    }
},
{
  'name' : 'ACL',
  'plural' : 'ACLs',
  'base' :  '',
  'idInjection' : true,
  'properties' : {
        'model': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'property': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'accessType': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'permission': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'principalType': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'principalId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /ACLs',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /ACLs',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /ACLs/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /ACLs/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /ACLs/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /ACLs/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /ACLs/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /ACLs',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /ACLs/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /ACLs/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /ACLs/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /ACLs/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /ACLs/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'ACL',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /ACLs/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'RoleMapping',
  'plural' : 'RoleMappings',
  'base' :  '',
  'idInjection' : false,
  'properties' : {
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'principalType': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'principalId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'roleId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'role': { 'foreignKey': 'roleId', 'model': 'Role', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__role': {
          'url': ' /RoleMappings/:id/role',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'role' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation role.'
       },
        'create': {
          'url': ' /RoleMappings',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /RoleMappings',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /RoleMappings/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /RoleMappings/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /RoleMappings/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /RoleMappings/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /RoleMappings/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /RoleMappings',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /RoleMappings/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /RoleMappings/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /RoleMappings/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /RoleMappings/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /RoleMappings/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /RoleMappings/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::findById::Role::principals': {
          'url': ' /Roles/:id/principals/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for principals.'
       },
        '::destroyById::Role::principals': {
          'url': ' /Roles/:id/principals/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for principals.'
       },
        '::updateById::Role::principals': {
          'url': ' /Roles/:id/principals/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for principals.'
       },
        '::get::Role::principals': {
          'url': ' /Roles/:id/principals',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'principals' : 'RoleMapping',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries principals of Role.'
       },
        '::create::Role::principals': {
          'url': ' /Roles/:id/principals',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in principals of this model.'
       },
        '::delete::Role::principals': {
          'url': ' /Roles/:id/principals',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all principals of this model.'
       },
        '::count::Role::principals': {
          'url': ' /Roles/:id/principals/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts principals of Role.'
       }

    }
},
{
  'name' : 'Role',
  'plural' : 'Roles',
  'base' :  '',
  'idInjection' : true,
  'properties' : {
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'name': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'description': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'created': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'modified': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'principals': { 'foreignKey': 'roleId', 'model': 'RoleMapping', 'type': 'hasMany'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__findById__principals': {
          'url': ' /Roles/:id/principals/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for principals.'
       },
        'prototype$__destroyById__principals': {
          'url': ' /Roles/:id/principals/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for principals.'
       },
        'prototype$__updateById__principals': {
          'url': ' /Roles/:id/principals/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for principals.'
       },
        'prototype$__get__principals': {
          'url': ' /Roles/:id/principals',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'principals' : 'RoleMapping',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries principals of Role.'
       },
        'prototype$__create__principals': {
          'url': ' /Roles/:id/principals',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'RoleMapping',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in principals of this model.'
       },
        'prototype$__delete__principals': {
          'url': ' /Roles/:id/principals',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all principals of this model.'
       },
        'prototype$__count__principals': {
          'url': ' /Roles/:id/principals/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts principals of Role.'
       },
        'create': {
          'url': ' /Roles',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /Roles',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /Roles/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /Roles/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /Roles/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /Roles/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /Roles/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /Roles',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /Roles/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /Roles/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /Roles/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /Roles/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /Roles/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /Roles/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::get::RoleMapping::role': {
          'url': ' /RoleMappings/:id/role',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'role' : 'Role',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation role.'
       }

    }
},
{
  'name' : 'Enumerado',
  'plural' : 'enumerados',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'nome': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'codigoEnu': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'descricaoEnu': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'sequencia': {     
            'type' : 'Number',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'inativo': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'detalheEnu': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'aplicativoId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        }
    },
    'validations': [],
    'relations': {
        'aplicativos': { 'foreignKey': 'aplicativoId', 'model': 'aplicativo', 'type': 'referencesMany'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__findById__aplicativos': {
          'url': ' /enumerados/:id/aplicativos/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for aplicativos.'
       },
        'prototype$__destroyById__aplicativos': {
          'url': ' /enumerados/:id/aplicativos/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for aplicativos.'
       },
        'prototype$__updateById__aplicativos': {
          'url': ' /enumerados/:id/aplicativos/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for aplicativos.'
       },
        'prototype$__link__aplicativos': {
          'url': ' /enumerados/:id/aplicativos/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for aplicativos.'
       },
        'prototype$__unlink__aplicativos': {
          'url': ' /enumerados/:id/aplicativos/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the aplicativos relation to an item by id.'
       },
        'prototype$__exists__aplicativos': {
          'url': ' /enumerados/:id/aplicativos/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of aplicativos relation to an item by id.'
       },
        '__get__enumeradoSono': {
          'url': ' /enumerados/enumeradoSono',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'enumeradoSono' : 'enumerado',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries enumeradoSono of enumerado.'
       },
        '__create__enumeradoSono': {
          'url': ' /enumerados/enumeradoSono',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in enumeradoSono of this model.'
       },
        '__delete__enumeradoSono': {
          'url': ' /enumerados/enumeradoSono',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all enumeradoSono of this model.'
       },
        '__count__enumeradoSono': {
          'url': ' /enumerados/enumeradoSono/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts enumeradoSono of enumerado.'
       },
        '__get__enumeradoCheckUp': {
          'url': ' /enumerados/enumeradoCheckUp',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'enumeradoCheckUp' : 'enumerado',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries enumeradoCheckUp of enumerado.'
       },
        '__create__enumeradoCheckUp': {
          'url': ' /enumerados/enumeradoCheckUp',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in enumeradoCheckUp of this model.'
       },
        '__delete__enumeradoCheckUp': {
          'url': ' /enumerados/enumeradoCheckUp',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all enumeradoCheckUp of this model.'
       },
        '__count__enumeradoCheckUp': {
          'url': ' /enumerados/enumeradoCheckUp/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts enumeradoCheckUp of enumerado.'
       },
        '__get__enumeradoCentroDiagnostico': {
          'url': ' /enumerados/enumeradoCentroDiagnostico',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'enumeradoCentroDiagnostico' : 'enumerado',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries enumeradoCentroDiagnostico of enumerado.'
       },
        '__create__enumeradoCentroDiagnostico': {
          'url': ' /enumerados/enumeradoCentroDiagnostico',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in enumeradoCentroDiagnostico of this model.'
       },
        '__delete__enumeradoCentroDiagnostico': {
          'url': ' /enumerados/enumeradoCentroDiagnostico',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all enumeradoCentroDiagnostico of this model.'
       },
        '__count__enumeradoCentroDiagnostico': {
          'url': ' /enumerados/enumeradoCentroDiagnostico/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts enumeradoCentroDiagnostico of enumerado.'
       },
        '__get__enumeradoMedicinaOcupacional': {
          'url': ' /enumerados/enumeradoMedicinaOcupacional',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'enumeradoMedicinaOcupacional' : 'enumerado',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries enumeradoMedicinaOcupacional of enumerado.'
       },
        '__create__enumeradoMedicinaOcupacional': {
          'url': ' /enumerados/enumeradoMedicinaOcupacional',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in enumeradoMedicinaOcupacional of this model.'
       },
        '__delete__enumeradoMedicinaOcupacional': {
          'url': ' /enumerados/enumeradoMedicinaOcupacional',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all enumeradoMedicinaOcupacional of this model.'
       },
        '__count__enumeradoMedicinaOcupacional': {
          'url': ' /enumerados/enumeradoMedicinaOcupacional/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts enumeradoMedicinaOcupacional of enumerado.'
       },
        'prototype$__get__aplicativos': {
          'url': ' /enumerados/:id/aplicativos',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries aplicativos of enumerado.'
       },
        'prototype$__create__aplicativos': {
          'url': ' /enumerados/:id/aplicativos',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in aplicativos of this model.'
       },
        'prototype$__delete__aplicativos': {
          'url': ' /enumerados/:id/aplicativos',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all aplicativos of this model.'
       },
        'prototype$__count__aplicativos': {
          'url': ' /enumerados/:id/aplicativos/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts aplicativos of enumerado.'
       },
        'create': {
          'url': ' /enumerados',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /enumerados',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /enumerados/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /enumerados/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /enumerados/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /enumerados/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /enumerados/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /enumerados',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /enumerados/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /enumerados/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /enumerados/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /enumerados/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /enumerados/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'enumerado',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /enumerados/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        'atualizarEnumerado': {
          'url': ' /enumerados/atualizarEnumerado',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'}
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': true 
          },
          'description': 'Atualizar Cadastro de Enumerado.'
       }

    }
},
{
  'name' : 'Parametro',
  'plural' : 'parametros',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'codParametro': {     
            'type' : 'String',
            'required' :  true,
            'isId' :  true,
            'isArray' :  false
        },
        'descricao': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'valParametro': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'detalhe': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'inativo': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /parametros',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /parametros',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /parametros/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /parametros/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /parametros/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /parametros/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /parametros/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /parametros',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /parametros/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /parametros/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /parametros/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /parametros/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /parametros/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'parametro',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /parametros/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        'getNumeroLivre': {
          'url': ' /parametros/getNumeroLivre',
          'method': 'GET',
          'params': {
             'numeroLivre' : {'type' : 'string', 'placement' : 'query'}
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       },
        'getParametros': {
          'url': ' /parametros/getParametros',
          'method': 'GET',
          'params': {
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       }

    }
},
{
  'name' : 'Job',
  'plural' : 'jobs',
  'base' :  'PersistedModel',
  'idInjection' : true,
  'properties' : {
        'nomeJob': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'dtCriacao': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'parametro': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'resultado': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'status': {     
            'type' : 'Number',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /jobs',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'job',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /jobs',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'job',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /jobs/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'job',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /jobs/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'job',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /jobs/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /jobs/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'job',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /jobs/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'job',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /jobs',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'job',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /jobs/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'job',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /jobs/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /jobs/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /jobs/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /jobs/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'job',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /jobs/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        'sendEmail': {
          'url': ' /jobs/sendEmail',
          'method': 'POST',
          'params': {
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       },
        'execJob': {
          'url': ' /jobs/execJob',
          'method': 'POST',
          'params': {
             'parametro' : {'type' : 'Object', 'placement' : 'query'},
             'req' : {'type' : 'object', 'placement' : 'req'}
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       }

    }
},
{
  'name' : 'Pais',
  'plural' : 'pais',
  'base' :  'PersistedModel',
  'idInjection' : true,
  'properties' : {
        'nome': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'codigoDDI': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'imagemBandeira': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'locale': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /pais',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /pais',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /pais/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /pais/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /pais/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /pais/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /pais/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /pais',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /pais/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /pais/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /pais/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /pais/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /pais/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pais',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /pais/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        'getEnderecoCompletoPorCEP': {
          'url': ' /pais/getEnderecoCompletoPorCEP',
          'method': 'GET',
          'params': {
             'parametro' : {'type' : 'Object', 'placement' : 'query'}
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       }

    }
},
{
  'name' : 'TextoPadrao',
  'plural' : 'textoPadraos',
  'base' :  'PersistedModel',
  'idInjection' : true,
  'properties' : {
        'tipo': {     
            'type' : 'Number',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'nome': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'conteudo': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'inativo': {     
            'type' : 'Number',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /textoPadraos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /textoPadraos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /textoPadraos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /textoPadraos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /textoPadraos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /textoPadraos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /textoPadraos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /textoPadraos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /textoPadraos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /textoPadraos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /textoPadraos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /textoPadraos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /textoPadraos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'textoPadrao',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /textoPadraos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        'getTextoParametro': {
          'url': ' /textoPadraos/getTextoParametro',
          'method': 'GET',
          'params': {
             'codigoParametro' : {'type' : 'string', 'placement' : 'query'}
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': true 
          },
          'description': 'No description given.'
       }

    }
},
{
  'name' : 'Pessoa',
  'plural' : 'pessoas',
  'base' :  'PersistedModel',
  'idInjection' : true,
  'properties' : {
        'nomeCompleto': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dataNascimento': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'infoAd': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'email': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'dtCadastro': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'genero': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'nrCPF': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'listPerfilAcesso': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'tipoSanguineo': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'imgPerfil': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'userId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        }
    },
    'validations': [],
    'relations': {
        'user': { 'foreignKey': 'userId', 'model': 'User', 'type': 'referencesMany'} ,
        'perfil': { 'foreignKey': 'listPerfilAcesso', 'model': 'perfilAcesso', 'type': 'referencesMany'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__findById__user': {
          'url': ' /pessoas/:id/user/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for user.'
       },
        'prototype$__destroyById__user': {
          'url': ' /pessoas/:id/user/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for user.'
       },
        'prototype$__updateById__user': {
          'url': ' /pessoas/:id/user/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for user.'
       },
        'prototype$__link__user': {
          'url': ' /pessoas/:id/user/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'user' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for user.'
       },
        'prototype$__unlink__user': {
          'url': ' /pessoas/:id/user/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the user relation to an item by id.'
       },
        'prototype$__exists__user': {
          'url': ' /pessoas/:id/user/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of user relation to an item by id.'
       },
        'prototype$__findById__perfil': {
          'url': ' /pessoas/:id/perfil/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for perfil.'
       },
        'prototype$__destroyById__perfil': {
          'url': ' /pessoas/:id/perfil/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for perfil.'
       },
        'prototype$__updateById__perfil': {
          'url': ' /pessoas/:id/perfil/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for perfil.'
       },
        'prototype$__link__perfil': {
          'url': ' /pessoas/:id/perfil/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'perfil' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for perfil.'
       },
        'prototype$__unlink__perfil': {
          'url': ' /pessoas/:id/perfil/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the perfil relation to an item by id.'
       },
        'prototype$__exists__perfil': {
          'url': ' /pessoas/:id/perfil/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of perfil relation to an item by id.'
       },
        'prototype$__get__user': {
          'url': ' /pessoas/:id/user',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'user' : 'User',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries user of pessoa.'
       },
        'prototype$__create__user': {
          'url': ' /pessoas/:id/user',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'User',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in user of this model.'
       },
        'prototype$__delete__user': {
          'url': ' /pessoas/:id/user',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all user of this model.'
       },
        'prototype$__count__user': {
          'url': ' /pessoas/:id/user/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts user of pessoa.'
       },
        'prototype$__get__perfil': {
          'url': ' /pessoas/:id/perfil',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'perfil' : 'perfilAcesso',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries perfil of pessoa.'
       },
        'prototype$__create__perfil': {
          'url': ' /pessoas/:id/perfil',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in perfil of this model.'
       },
        'prototype$__delete__perfil': {
          'url': ' /pessoas/:id/perfil',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all perfil of this model.'
       },
        'prototype$__count__perfil': {
          'url': ' /pessoas/:id/perfil/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts perfil of pessoa.'
       },
        'create': {
          'url': ' /pessoas',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /pessoas',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /pessoas/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /pessoas/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /pessoas/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /pessoas/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /pessoas/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /pessoas',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /pessoas/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /pessoas/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /pessoas/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /pessoas/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /pessoas/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /pessoas/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        'criarLogin': {
          'url': ' /pessoas/criarLogin',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'cadastroPessoa', 'placement' : 'body'}
          },
          'returns': {
           'ret' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       },
        'validarEmail': {
          'url': ' /pessoas/validarEmail',
          'method': 'POST',
          'params': {
             'user' : {'type' : 'Object', 'placement' : 'query'}
          },
          'returns': {
           'ret' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       },
        'getIdentidade': {
          'url': ' /pessoas/getIdentidade',
          'method': 'GET',
          'params': {
             'userId' : {'type' : 'string', 'placement' : 'query'}
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       },
        'aplicarPerfilAcesso': {
          'url': ' /pessoas/setPerfilAcesso',
          'method': 'POST',
          'params': {
             'userId' : {'type' : 'string', 'placement' : 'query'},
             'perfilAcesso' : {'type' : 'string', 'placement' : 'query'}
          },
          'returns': {
           'retorno' : 'Object',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       },
        '::get::agendamento::cliente': {
          'url': ' /agendamentos/:id/cliente',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'cliente' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation cliente.'
       },
        '::get::agendamento::atendente': {
          'url': ' /agendamentos/:id/atendente',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'atendente' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation atendente.'
       },
        '::get::instalacao::pessoa': {
          'url': ' /instalacaos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        '::findById::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for pessoa.'
       },
        '::destroyById::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for pessoa.'
       },
        '::updateById::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for pessoa.'
       },
        '::link::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for pessoa.'
       },
        '::unlink::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the pessoa relation to an item by id.'
       },
        '::exists::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of pessoa relation to an item by id.'
       },
        '::get::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries pessoa of notificacao.'
       },
        '::create::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in pessoa of this model.'
       },
        '::delete::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all pessoa of this model.'
       },
        '::count::notificacao::pessoa': {
          'url': ' /notificacaos/:id/pessoa/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts pessoa of notificacao.'
       },
        '::get::dispositivo::pessoa': {
          'url': ' /dispositivos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        '::get::pessoaRegistro::pessoa': {
          'url': ' /pessoaRegistros/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        '::get::pessoaRegistro::usuario': {
          'url': ' /pessoaRegistros/:id/usuario',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'usuario' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation usuario.'
       },
        '::get::pessoaAlergia::pessoa': {
          'url': ' /pessoaAlergia/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        '::get::pessoaHistoricoFamiliar::pessoa': {
          'url': ' /pessoaHistoricoFamiliars/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        '::get::pessoaProtocolo::pessoa': {
          'url': ' /pessoaProtocolos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        '::get::protocolo::pessoa': {
          'url': ' /protocolos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       }

    }
},
{
  'name' : 'PerfilAcesso',
  'plural' : 'perfilAcessos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'codigoPerfil': {     
            'type' : 'String',
            'required' :  true,
            'isId' :  true,
            'isArray' :  false
        },
        'descricao': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'sequencia': {     
            'type' : 'Number',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'inativo': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /perfilAcessos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /perfilAcessos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /perfilAcessos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /perfilAcessos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /perfilAcessos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /perfilAcessos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /perfilAcessos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /perfilAcessos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /perfilAcessos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /perfilAcessos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /perfilAcessos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /perfilAcessos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /perfilAcessos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /perfilAcessos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::findById::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for perfil.'
       },
        '::destroyById::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for perfil.'
       },
        '::updateById::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for perfil.'
       },
        '::link::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'perfil' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for perfil.'
       },
        '::unlink::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the perfil relation to an item by id.'
       },
        '::exists::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of perfil relation to an item by id.'
       },
        '::get::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'perfil' : 'perfilAcesso',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries perfil of pessoa.'
       },
        '::create::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'perfilAcesso',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in perfil of this model.'
       },
        '::delete::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all perfil of this model.'
       },
        '::count::pessoa::perfil': {
          'url': ' /pessoas/:id/perfil/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts perfil of pessoa.'
       }

    }
},
{
  'name' : 'Rota',
  'plural' : 'rota',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'state': {     
            'type' : 'String',
            'required' :  true,
            'isId' :  true,
            'isArray' :  false
        },
        'titulo': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'listPerfilAcesso': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' : true 
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /rota',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /rota',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /rota/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /rota/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /rota/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /rota/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /rota/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /rota',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /rota/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /rota/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /rota/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /rota/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /rota/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'rota',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /rota/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        'validarPermissao': {
          'url': ' /rota/validarPermissao',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'string', 'placement' : 'query'},
          },
          'returns': {
           'acessoLiberado' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'No description given.'
       },
        'getConfigRota': {
          'url': ' /rota/getConfigRota',
          'method': 'GET',
          'params': {
          },
          'returns': {
           'list' : 'any',
            'isArray': true,
            'root': true 
          },
          'description': 'No description given.'
       }

    }
},
{
  'name' : 'Periodicidade',
  'plural' : 'periodicidades',
  'base' :  'PersistedModel',
  'idInjection' : true,
  'properties' : {
        'nome': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'descricao': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'ativo': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /periodicidades',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /periodicidades',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /periodicidades/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /periodicidades/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /periodicidades/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /periodicidades/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /periodicidades/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /periodicidades',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /periodicidades/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /periodicidades/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /periodicidades/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /periodicidades/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /periodicidades/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /periodicidades/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::findById::produto::periodicidade': {
          'url': ' /produtos/:id/periodicidade/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for periodicidade.'
       },
        '::destroyById::produto::periodicidade': {
          'url': ' /produtos/:id/periodicidade/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for periodicidade.'
       },
        '::updateById::produto::periodicidade': {
          'url': ' /produtos/:id/periodicidade/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for periodicidade.'
       },
        '::get::produto::periodicidade': {
          'url': ' /produtos/:id/periodicidade',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'periodicidade' : 'periodicidade',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries periodicidade of produto.'
       },
        '::create::produto::periodicidade': {
          'url': ' /produtos/:id/periodicidade',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in periodicidade of this model.'
       },
        '::delete::produto::periodicidade': {
          'url': ' /produtos/:id/periodicidade',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all periodicidade of this model.'
       },
        '::count::produto::periodicidade': {
          'url': ' /produtos/:id/periodicidade/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts periodicidade of produto.'
       }

    }
},
{
  'name' : 'TipoServico',
  'plural' : 'tipoServicos',
  'base' :  'PersistedModel',
  'idInjection' : true,
  'properties' : {
        'nome': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'descricao': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'ativo': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /tipoServicos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /tipoServicos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /tipoServicos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /tipoServicos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /tipoServicos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /tipoServicos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /tipoServicos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /tipoServicos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /tipoServicos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /tipoServicos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /tipoServicos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /tipoServicos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /tipoServicos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /tipoServicos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::findById::produto::tipoServico': {
          'url': ' /produtos/:id/tipoServico/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for tipoServico.'
       },
        '::destroyById::produto::tipoServico': {
          'url': ' /produtos/:id/tipoServico/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for tipoServico.'
       },
        '::updateById::produto::tipoServico': {
          'url': ' /produtos/:id/tipoServico/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for tipoServico.'
       },
        '::get::produto::tipoServico': {
          'url': ' /produtos/:id/tipoServico',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'tipoServico' : 'tipoServico',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries tipoServico of produto.'
       },
        '::create::produto::tipoServico': {
          'url': ' /produtos/:id/tipoServico',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in tipoServico of this model.'
       },
        '::delete::produto::tipoServico': {
          'url': ' /produtos/:id/tipoServico',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all tipoServico of this model.'
       },
        '::count::produto::tipoServico': {
          'url': ' /produtos/:id/tipoServico/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts tipoServico of produto.'
       }

    }
},
{
  'name' : 'Produto',
  'plural' : 'produtos',
  'base' :  'PersistedModel',
  'idInjection' : true,
  'properties' : {
        'nome': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'preco': {     
            'type' : 'Number',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'textoServico': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'textoDetalhamento': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'periodicidade': { 'foreignKey': 'id', 'model': 'periodicidade', 'type': 'hasMany'} ,
        'tipoServico': { 'foreignKey': 'id', 'model': 'tipoServico', 'type': 'hasMany'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__findById__periodicidade': {
          'url': ' /produtos/:id/periodicidade/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for periodicidade.'
       },
        'prototype$__destroyById__periodicidade': {
          'url': ' /produtos/:id/periodicidade/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for periodicidade.'
       },
        'prototype$__updateById__periodicidade': {
          'url': ' /produtos/:id/periodicidade/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for periodicidade.'
       },
        'prototype$__findById__tipoServico': {
          'url': ' /produtos/:id/tipoServico/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for tipoServico.'
       },
        'prototype$__destroyById__tipoServico': {
          'url': ' /produtos/:id/tipoServico/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for tipoServico.'
       },
        'prototype$__updateById__tipoServico': {
          'url': ' /produtos/:id/tipoServico/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for tipoServico.'
       },
        'prototype$__get__periodicidade': {
          'url': ' /produtos/:id/periodicidade',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'periodicidade' : 'periodicidade',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries periodicidade of produto.'
       },
        'prototype$__create__periodicidade': {
          'url': ' /produtos/:id/periodicidade',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'periodicidade',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in periodicidade of this model.'
       },
        'prototype$__delete__periodicidade': {
          'url': ' /produtos/:id/periodicidade',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all periodicidade of this model.'
       },
        'prototype$__count__periodicidade': {
          'url': ' /produtos/:id/periodicidade/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts periodicidade of produto.'
       },
        'prototype$__get__tipoServico': {
          'url': ' /produtos/:id/tipoServico',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'tipoServico' : 'tipoServico',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries tipoServico of produto.'
       },
        'prototype$__create__tipoServico': {
          'url': ' /produtos/:id/tipoServico',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'tipoServico',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in tipoServico of this model.'
       },
        'prototype$__delete__tipoServico': {
          'url': ' /produtos/:id/tipoServico',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all tipoServico of this model.'
       },
        'prototype$__count__tipoServico': {
          'url': ' /produtos/:id/tipoServico/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts tipoServico of produto.'
       },
        'create': {
          'url': ' /produtos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /produtos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /produtos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /produtos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /produtos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /produtos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /produtos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /produtos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /produtos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /produtos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /produtos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /produtos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /produtos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'produto',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /produtos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'Dica',
  'plural' : 'dicas',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'titulo': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'subTitulo': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'imagem': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'link': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'descricao': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'status': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'imagemTop': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'imagemFeed': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dtPublicacao': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'aplicativoId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        }
    },
    'validations': [],
    'relations': {
        'aplicativos': { 'foreignKey': 'aplicativoId', 'model': 'aplicativo', 'type': 'referencesMany'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__findById__aplicativos': {
          'url': ' /dicas/:id/aplicativos/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for aplicativos.'
       },
        'prototype$__destroyById__aplicativos': {
          'url': ' /dicas/:id/aplicativos/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for aplicativos.'
       },
        'prototype$__updateById__aplicativos': {
          'url': ' /dicas/:id/aplicativos/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for aplicativos.'
       },
        'prototype$__link__aplicativos': {
          'url': ' /dicas/:id/aplicativos/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for aplicativos.'
       },
        'prototype$__unlink__aplicativos': {
          'url': ' /dicas/:id/aplicativos/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the aplicativos relation to an item by id.'
       },
        'prototype$__exists__aplicativos': {
          'url': ' /dicas/:id/aplicativos/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of aplicativos relation to an item by id.'
       },
        '__get__dicaSono': {
          'url': ' /dicas/dicaSono',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'dicaSono' : 'dica',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries dicaSono of dica.'
       },
        '__create__dicaSono': {
          'url': ' /dicas/dicaSono',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in dicaSono of this model.'
       },
        '__delete__dicaSono': {
          'url': ' /dicas/dicaSono',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all dicaSono of this model.'
       },
        '__count__dicaSono': {
          'url': ' /dicas/dicaSono/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts dicaSono of dica.'
       },
        '__get__dicaCheckUp': {
          'url': ' /dicas/dicaCheckUp',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'dicaCheckUp' : 'dica',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries dicaCheckUp of dica.'
       },
        '__create__dicaCheckUp': {
          'url': ' /dicas/dicaCheckUp',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in dicaCheckUp of this model.'
       },
        '__delete__dicaCheckUp': {
          'url': ' /dicas/dicaCheckUp',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all dicaCheckUp of this model.'
       },
        '__count__dicaCheckUp': {
          'url': ' /dicas/dicaCheckUp/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts dicaCheckUp of dica.'
       },
        '__get__dicaCentroDiagnostico': {
          'url': ' /dicas/dicaCentroDiagnostico',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'dicaCentroDiagnostico' : 'dica',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries dicaCentroDiagnostico of dica.'
       },
        '__create__dicaCentroDiagnostico': {
          'url': ' /dicas/dicaCentroDiagnostico',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in dicaCentroDiagnostico of this model.'
       },
        '__delete__dicaCentroDiagnostico': {
          'url': ' /dicas/dicaCentroDiagnostico',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all dicaCentroDiagnostico of this model.'
       },
        '__count__dicaCentroDiagnostico': {
          'url': ' /dicas/dicaCentroDiagnostico/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts dicaCentroDiagnostico of dica.'
       },
        '__get__dicaMedicinaOcupacional': {
          'url': ' /dicas/dicaMedicinaOcupacional',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'dicaMedicinaOcupacional' : 'dica',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries dicaMedicinaOcupacional of dica.'
       },
        '__create__dicaMedicinaOcupacional': {
          'url': ' /dicas/dicaMedicinaOcupacional',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in dicaMedicinaOcupacional of this model.'
       },
        '__delete__dicaMedicinaOcupacional': {
          'url': ' /dicas/dicaMedicinaOcupacional',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all dicaMedicinaOcupacional of this model.'
       },
        '__count__dicaMedicinaOcupacional': {
          'url': ' /dicas/dicaMedicinaOcupacional/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts dicaMedicinaOcupacional of dica.'
       },
        'prototype$__get__aplicativos': {
          'url': ' /dicas/:id/aplicativos',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries aplicativos of dica.'
       },
        'prototype$__create__aplicativos': {
          'url': ' /dicas/:id/aplicativos',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in aplicativos of this model.'
       },
        'prototype$__delete__aplicativos': {
          'url': ' /dicas/:id/aplicativos',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all aplicativos of this model.'
       },
        'prototype$__count__aplicativos': {
          'url': ' /dicas/:id/aplicativos/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts aplicativos of dica.'
       },
        'create': {
          'url': ' /dicas',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /dicas',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /dicas/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /dicas/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /dicas/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /dicas/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /dicas/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /dicas',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /dicas/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /dicas/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /dicas/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /dicas/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /dicas/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dica',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /dicas/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'Aplicativo',
  'plural' : 'aplicativos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'codigoApp': {     
            'type' : 'String',
            'required' :  true,
            'isId' :  true,
            'isArray' :  false
        },
        'nome': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'descricao': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'inativo': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'pushAppId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'pushKeyAuth': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /aplicativos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /aplicativos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /aplicativos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /aplicativos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /aplicativos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /aplicativos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /aplicativos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /aplicativos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /aplicativos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /aplicativos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /aplicativos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /aplicativos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /aplicativos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /aplicativos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       },
        '::findById::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for aplicativos.'
       },
        '::destroyById::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for aplicativos.'
       },
        '::updateById::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for aplicativos.'
       },
        '::link::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for aplicativos.'
       },
        '::unlink::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the aplicativos relation to an item by id.'
       },
        '::exists::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of aplicativos relation to an item by id.'
       },
        '::get::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries aplicativos of enumerado.'
       },
        '::create::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in aplicativos of this model.'
       },
        '::delete::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all aplicativos of this model.'
       },
        '::count::enumerado::aplicativos': {
          'url': ' /enumerados/:id/aplicativos/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts aplicativos of enumerado.'
       },
        '::findById::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for aplicativos.'
       },
        '::destroyById::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for aplicativos.'
       },
        '::updateById::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for aplicativos.'
       },
        '::link::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for aplicativos.'
       },
        '::unlink::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the aplicativos relation to an item by id.'
       },
        '::exists::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of aplicativos relation to an item by id.'
       },
        '::get::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries aplicativos of dica.'
       },
        '::create::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in aplicativos of this model.'
       },
        '::delete::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all aplicativos of this model.'
       },
        '::count::dica::aplicativos': {
          'url': ' /dicas/:id/aplicativos/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts aplicativos of dica.'
       },
        '::findById::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for aplicativos.'
       },
        '::destroyById::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for aplicativos.'
       },
        '::updateById::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for aplicativos.'
       },
        '::link::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for aplicativos.'
       },
        '::unlink::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the aplicativos relation to an item by id.'
       },
        '::exists::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of aplicativos relation to an item by id.'
       },
        '::get::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries aplicativos of examePreparo.'
       },
        '::create::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in aplicativos of this model.'
       },
        '::delete::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all aplicativos of this model.'
       },
        '::count::examePreparo::aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts aplicativos of examePreparo.'
       },
        '::get::instalacao::aplicativo': {
          'url': ' /instalacaos/:id/aplicativo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'aplicativo' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation aplicativo.'
       },
        '::get::notificacao::aplicativo': {
          'url': ' /notificacaos/:id/aplicativo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'aplicativo' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation aplicativo.'
       },
        '::get::dispositivo::aplicativo': {
          'url': ' /dispositivos/:id/aplicativo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'aplicativo' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation aplicativo.'
       }

    }
},
{
  'name' : 'ExamePreparo',
  'plural' : 'examePreparos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'nome': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'descricao': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'excluido': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'detalhe': {     
            'type' : 'exameDetalhe',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'aplicativoId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        }
    },
    'validations': [],
    'relations': {
        'aplicativos': { 'foreignKey': 'aplicativoId', 'model': 'aplicativo', 'type': 'referencesMany'} ,
        'detalhePreparo': { 'foreignKey': '', 'model': 'exameDetalhe', 'type': 'embedsMany'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__findById__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for aplicativos.'
       },
        'prototype$__destroyById__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for aplicativos.'
       },
        'prototype$__updateById__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for aplicativos.'
       },
        'prototype$__link__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for aplicativos.'
       },
        'prototype$__unlink__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the aplicativos relation to an item by id.'
       },
        'prototype$__exists__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of aplicativos relation to an item by id.'
       },
        'prototype$__findById__detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'exameDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for detalhePreparo.'
       },
        'prototype$__destroyById__detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for detalhePreparo.'
       },
        'prototype$__updateById__detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'exameDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for detalhePreparo.'
       },
        'prototype$__get__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'aplicativos' : 'aplicativo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries aplicativos of examePreparo.'
       },
        'prototype$__create__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in aplicativos of this model.'
       },
        'prototype$__delete__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all aplicativos of this model.'
       },
        'prototype$__count__aplicativos': {
          'url': ' /examePreparos/:id/aplicativos/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts aplicativos of examePreparo.'
       },
        '__get__preparoSono': {
          'url': ' /examePreparos/preparoSono',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'preparoSono' : 'examePreparo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries preparoSono of examePreparo.'
       },
        '__create__preparoSono': {
          'url': ' /examePreparos/preparoSono',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in preparoSono of this model.'
       },
        '__delete__preparoSono': {
          'url': ' /examePreparos/preparoSono',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all preparoSono of this model.'
       },
        '__count__preparoSono': {
          'url': ' /examePreparos/preparoSono/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts preparoSono of examePreparo.'
       },
        '__get__preparoCheckUp': {
          'url': ' /examePreparos/preparoCheckUp',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'preparoCheckUp' : 'examePreparo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries preparoCheckUp of examePreparo.'
       },
        '__create__preparoCheckUp': {
          'url': ' /examePreparos/preparoCheckUp',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in preparoCheckUp of this model.'
       },
        '__delete__preparoCheckUp': {
          'url': ' /examePreparos/preparoCheckUp',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all preparoCheckUp of this model.'
       },
        '__count__preparoCheckUp': {
          'url': ' /examePreparos/preparoCheckUp/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts preparoCheckUp of examePreparo.'
       },
        '__get__preparoCentroDiagnostico': {
          'url': ' /examePreparos/preparoCentroDiagnostico',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'preparoCentroDiagnostico' : 'examePreparo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries preparoCentroDiagnostico of examePreparo.'
       },
        '__create__preparoCentroDiagnostico': {
          'url': ' /examePreparos/preparoCentroDiagnostico',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in preparoCentroDiagnostico of this model.'
       },
        '__delete__preparoCentroDiagnostico': {
          'url': ' /examePreparos/preparoCentroDiagnostico',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all preparoCentroDiagnostico of this model.'
       },
        '__count__preparoCentroDiagnostico': {
          'url': ' /examePreparos/preparoCentroDiagnostico/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts preparoCentroDiagnostico of examePreparo.'
       },
        '__get__preparoMedicinaOcupacional': {
          'url': ' /examePreparos/preparoMedicinaOcupacional',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'preparoMedicinaOcupacional' : 'examePreparo',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries preparoMedicinaOcupacional of examePreparo.'
       },
        '__create__preparoMedicinaOcupacional': {
          'url': ' /examePreparos/preparoMedicinaOcupacional',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in preparoMedicinaOcupacional of this model.'
       },
        '__delete__preparoMedicinaOcupacional': {
          'url': ' /examePreparos/preparoMedicinaOcupacional',
          'method': 'DELETE',
          'params': {
          },
          'returns': {
 
          },
          'description': 'Deletes all preparoMedicinaOcupacional of this model.'
       },
        '__count__preparoMedicinaOcupacional': {
          'url': ' /examePreparos/preparoMedicinaOcupacional/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts preparoMedicinaOcupacional of examePreparo.'
       },
        'prototype$__get__detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'detalhePreparo' : 'exameDetalhe',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries detalhePreparo of examePreparo.'
       },
        'prototype$__create__detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'exameDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in detalhePreparo of this model.'
       },
        'prototype$__delete__detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all detalhePreparo of this model.'
       },
        'prototype$__count__detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts detalhePreparo of examePreparo.'
       },
        'create': {
          'url': ' /examePreparos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /examePreparos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /examePreparos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /examePreparos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /examePreparos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /examePreparos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /examePreparos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /examePreparos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /examePreparos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /examePreparos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /examePreparos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /examePreparos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /examePreparos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'examePreparo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /examePreparos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'Agendamento',
  'plural' : 'agendamentos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'dataCriacao': {     
            'type' : 'Date',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'dataDesejada': {     
            'type' : 'Date',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'periodoDesejado': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'status': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'dataAgendamento': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'horaAgendamento': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'localAgendamento': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'obs': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'imgPreAgendamento': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'excluido': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'clienteId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'atendenteId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'cliente': { 'foreignKey': 'clienteId', 'model': 'pessoa', 'type': 'belongsTo'} ,
        'atendente': { 'foreignKey': 'atendenteId', 'model': 'pessoa', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__cliente': {
          'url': ' /agendamentos/:id/cliente',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'cliente' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation cliente.'
       },
        'prototype$__get__atendente': {
          'url': ' /agendamentos/:id/atendente',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'atendente' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation atendente.'
       },
        'create': {
          'url': ' /agendamentos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /agendamentos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /agendamentos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /agendamentos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /agendamentos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /agendamentos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /agendamentos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /agendamentos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /agendamentos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /agendamentos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /agendamentos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /agendamentos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /agendamentos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'agendamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /agendamentos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'Instalacao',
  'plural' : 'instalacaos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'deviceToken': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'deviceType': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dataCriacao': {     
            'type' : 'Date',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'inativo': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'pessoaId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'aplicativoId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'pessoa': { 'foreignKey': 'pessoaId', 'model': 'pessoa', 'type': 'belongsTo'} ,
        'aplicativo': { 'foreignKey': 'aplicativoId', 'model': 'aplicativo', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__pessoa': {
          'url': ' /instalacaos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        'prototype$__get__aplicativo': {
          'url': ' /instalacaos/:id/aplicativo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'aplicativo' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation aplicativo.'
       },
        'create': {
          'url': ' /instalacaos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /instalacaos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /instalacaos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /instalacaos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /instalacaos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /instalacaos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /instalacaos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /instalacaos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /instalacaos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /instalacaos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /instalacaos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /instalacaos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /instalacaos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'instalacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /instalacaos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'Notificacao',
  'plural' : 'notificacaos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'titulo': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'mensagem': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'tipo': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dataCriacao': {     
            'type' : 'Date',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'status': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dataEnvio': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'pessoaId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'aplicativoId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'pessoa': { 'foreignKey': 'pessoaId', 'model': 'pessoa', 'type': 'referencesMany'} ,
        'aplicativo': { 'foreignKey': 'aplicativoId', 'model': 'aplicativo', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__findById__pessoa': {
          'url': ' /notificacaos/:id/pessoa/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for pessoa.'
       },
        'prototype$__destroyById__pessoa': {
          'url': ' /notificacaos/:id/pessoa/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for pessoa.'
       },
        'prototype$__updateById__pessoa': {
          'url': ' /notificacaos/:id/pessoa/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for pessoa.'
       },
        'prototype$__link__pessoa': {
          'url': ' /notificacaos/:id/pessoa/rel/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Add a related item by id for pessoa.'
       },
        'prototype$__unlink__pessoa': {
          'url': ' /notificacaos/:id/pessoa/rel/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Remove the pessoa relation to an item by id.'
       },
        'prototype$__exists__pessoa': {
          'url': ' /notificacaos/:id/pessoa/rel/:fk',
          'method': 'HEAD',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': true 
          },
          'description': 'Check the existence of pessoa relation to an item by id.'
       },
        'prototype$__get__aplicativo': {
          'url': ' /notificacaos/:id/aplicativo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'aplicativo' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation aplicativo.'
       },
        'prototype$__get__pessoa': {
          'url': ' /notificacaos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries pessoa of notificacao.'
       },
        'prototype$__create__pessoa': {
          'url': ' /notificacaos/:id/pessoa',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in pessoa of this model.'
       },
        'prototype$__delete__pessoa': {
          'url': ' /notificacaos/:id/pessoa',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all pessoa of this model.'
       },
        'prototype$__count__pessoa': {
          'url': ' /notificacaos/:id/pessoa/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts pessoa of notificacao.'
       },
        'create': {
          'url': ' /notificacaos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /notificacaos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /notificacaos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /notificacaos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /notificacaos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /notificacaos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /notificacaos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /notificacaos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /notificacaos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /notificacaos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /notificacaos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /notificacaos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /notificacaos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'notificacao',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /notificacaos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'Dispositivo',
  'plural' : 'dispositivos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'uniqueId': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'apiVersion': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'system': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'architecture': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'name': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'manufacturer': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'model': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'networkCarrier': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'platform': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'idiom': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'versionNumber': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dataCriacao': {     
            'type' : 'Date',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'pessoaId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'aplicativoId': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'pessoa': { 'foreignKey': 'pessoaId', 'model': 'pessoa', 'type': 'belongsTo'} ,
        'aplicativo': { 'foreignKey': 'aplicativoId', 'model': 'aplicativo', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__pessoa': {
          'url': ' /dispositivos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        'prototype$__get__aplicativo': {
          'url': ' /dispositivos/:id/aplicativo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'aplicativo' : 'aplicativo',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation aplicativo.'
       },
        'create': {
          'url': ' /dispositivos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /dispositivos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /dispositivos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /dispositivos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /dispositivos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /dispositivos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /dispositivos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /dispositivos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /dispositivos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /dispositivos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /dispositivos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /dispositivos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /dispositivos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'dispositivo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /dispositivos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'PessoaRegistro',
  'plural' : 'pessoaRegistros',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'pessoaId': {     
            'type' : 'ObjectID',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'dtCadastro': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'modelo': {     
            'type' : 'Number',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'tipo': {     
            'type' : 'Number',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'usuarioId': {     
            'type' : 'ObjectID',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'excluido': {     
            'type' : 'Boolean',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'excluidoPor': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dtExclusao': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'motivoExclusao': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'imagem': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'registroSinalVital': {     
            'type' : 'sinalVital',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'registroMedicamento': {     
            'type' : 'pessoaMedicamento',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'pessoa': { 'foreignKey': 'pessoaId', 'model': 'pessoa', 'type': 'belongsTo'} ,
        'usuario': { 'foreignKey': 'usuarioId', 'model': 'pessoa', 'type': 'belongsTo'} ,
        'sinalVital': { 'foreignKey': '', 'model': 'sinalVital', 'type': 'embedsOne'} ,
        'medicamento': { 'foreignKey': '', 'model': 'pessoaMedicamento', 'type': 'embedsOne'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__pessoa': {
          'url': ' /pessoaRegistros/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        'prototype$__get__usuario': {
          'url': ' /pessoaRegistros/:id/usuario',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'usuario' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation usuario.'
       },
        'prototype$__get__sinalVital': {
          'url': ' /pessoaRegistros/:id/sinalVital',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'sinalVital' : 'sinalVital',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches hasOne relation sinalVital.'
       },
        'prototype$__create__sinalVital': {
          'url': ' /pessoaRegistros/:id/sinalVital',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'sinalVital',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in sinalVital of this model.'
       },
        'prototype$__update__sinalVital': {
          'url': ' /pessoaRegistros/:id/sinalVital',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'sinalVital',
            'isArray': false,
            'root': true 
          },
          'description': 'Update sinalVital of this model.'
       },
        'prototype$__destroy__sinalVital': {
          'url': ' /pessoaRegistros/:id/sinalVital',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes sinalVital of this model.'
       },
        'prototype$__get__medicamento': {
          'url': ' /pessoaRegistros/:id/medicamento',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'medicamento' : 'pessoaMedicamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches hasOne relation medicamento.'
       },
        'prototype$__create__medicamento': {
          'url': ' /pessoaRegistros/:id/medicamento',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaMedicamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in medicamento of this model.'
       },
        'prototype$__update__medicamento': {
          'url': ' /pessoaRegistros/:id/medicamento',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaMedicamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Update medicamento of this model.'
       },
        'prototype$__destroy__medicamento': {
          'url': ' /pessoaRegistros/:id/medicamento',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes medicamento of this model.'
       },
        'create': {
          'url': ' /pessoaRegistros',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /pessoaRegistros',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /pessoaRegistros/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /pessoaRegistros/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /pessoaRegistros/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /pessoaRegistros/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /pessoaRegistros/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /pessoaRegistros',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /pessoaRegistros/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /pessoaRegistros/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /pessoaRegistros/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /pessoaRegistros/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /pessoaRegistros/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaRegistro',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /pessoaRegistros/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'PessoaAlergia',
  'plural' : 'pessoaAlergia',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'alimentar': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'medicamentos': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'outras': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'pessoaId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'pessoa': { 'foreignKey': 'pessoaId', 'model': 'pessoa', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__pessoa': {
          'url': ' /pessoaAlergia/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        'create': {
          'url': ' /pessoaAlergia',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /pessoaAlergia',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /pessoaAlergia/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /pessoaAlergia/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /pessoaAlergia/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /pessoaAlergia/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /pessoaAlergia/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /pessoaAlergia',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /pessoaAlergia/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /pessoaAlergia/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /pessoaAlergia/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /pessoaAlergia/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /pessoaAlergia/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaAlergia',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /pessoaAlergia/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'PessoaHistoricoFamiliar',
  'plural' : 'pessoaHistoricoFamiliars',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'geracaoAtual': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'geracaoPais': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'geracaoAvos': {     
            'type' : 'Object',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'pessoaId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'pessoa': { 'foreignKey': 'pessoaId', 'model': 'pessoa', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__pessoa': {
          'url': ' /pessoaHistoricoFamiliars/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        'create': {
          'url': ' /pessoaHistoricoFamiliars',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /pessoaHistoricoFamiliars',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /pessoaHistoricoFamiliars/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /pessoaHistoricoFamiliars/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /pessoaHistoricoFamiliars/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /pessoaHistoricoFamiliars/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /pessoaHistoricoFamiliars/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /pessoaHistoricoFamiliars',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /pessoaHistoricoFamiliars/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /pessoaHistoricoFamiliars/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /pessoaHistoricoFamiliars/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /pessoaHistoricoFamiliars/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /pessoaHistoricoFamiliars/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaHistoricoFamiliar',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /pessoaHistoricoFamiliars/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'PessoaProtocolo',
  'plural' : 'pessoaProtocolos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'nrProtocolo': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'senhaProtocolo': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dtCadastro': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'pessoaId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        'pessoa': { 'foreignKey': 'pessoaId', 'model': 'pessoa', 'type': 'belongsTo'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__pessoa': {
          'url': ' /pessoaProtocolos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        'create': {
          'url': ' /pessoaProtocolos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /pessoaProtocolos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /pessoaProtocolos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /pessoaProtocolos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /pessoaProtocolos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /pessoaProtocolos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /pessoaProtocolos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /pessoaProtocolos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /pessoaProtocolos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /pessoaProtocolos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /pessoaProtocolos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /pessoaProtocolos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /pessoaProtocolos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaProtocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /pessoaProtocolos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'Protocolo',
  'plural' : 'protocolos',
  'base' :  'PersistedModel',
  'idInjection' : false,
  'properties' : {
        'nrProtocolo': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'senhaProtocolo': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dtCadastro': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'pessoaId': {     
            'type' : 'ObjectID',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'detalhe': {     
            'type' : 'protocoloDetalhe',
            'required' : false,
            'isId' : false,
            'isArray' : true 
        }
    },
    'validations': [],
    'relations': {
        'pessoa': { 'foreignKey': 'pessoaId', 'model': 'pessoa', 'type': 'belongsTo'} ,
        'detalheProtocolo': { 'foreignKey': '', 'model': 'protocoloDetalhe', 'type': 'embedsMany'} 
        },
    'acls': [],
    'methods':
    {
        'prototype$__get__pessoa': {
          'url': ' /protocolos/:id/pessoa',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'pessoa' : 'pessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches belongsTo relation pessoa.'
       },
        'prototype$__findById__detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'protocoloDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for detalheProtocolo.'
       },
        'prototype$__destroyById__detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for detalheProtocolo.'
       },
        'prototype$__updateById__detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'protocoloDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for detalheProtocolo.'
       },
        'prototype$__get__detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'detalheProtocolo' : 'protocoloDetalhe',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries detalheProtocolo of protocolo.'
       },
        'prototype$__create__detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'protocoloDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in detalheProtocolo of this model.'
       },
        'prototype$__delete__detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all detalheProtocolo of this model.'
       },
        'prototype$__count__detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts detalheProtocolo of protocolo.'
       },
        'create': {
          'url': ' /protocolos',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /protocolos',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /protocolos/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /protocolos/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /protocolos/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /protocolos/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /protocolos/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /protocolos',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /protocolos/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /protocolos/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /protocolos/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /protocolos/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /protocolos/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'protocolo',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /protocolos/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'ProtocoloDetalhe',
  'plural' : 'protocoloDetalhes',
  'base' :  'Model',
  'idInjection' : true,
  'properties' : {
        'nomeExame': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'linkDocumento': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'dtExame': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'String',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        '::findById::protocolo::detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'protocoloDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for detalheProtocolo.'
       },
        '::destroyById::protocolo::detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for detalheProtocolo.'
       },
        '::updateById::protocolo::detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'protocoloDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for detalheProtocolo.'
       },
        '::get::protocolo::detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'detalheProtocolo' : 'protocoloDetalhe',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries detalheProtocolo of protocolo.'
       },
        '::create::protocolo::detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'protocoloDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in detalheProtocolo of this model.'
       },
        '::delete::protocolo::detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all detalheProtocolo of this model.'
       },
        '::count::protocolo::detalheProtocolo': {
          'url': ' /protocolos/:id/detalheProtocolo/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts detalheProtocolo of protocolo.'
       }

    }
},
{
  'name' : 'SinalVital',
  'plural' : 'sinaisVitais',
  'base' :  'Model',
  'idInjection' : true,
  'properties' : {
        'data': {     
            'type' : 'Date',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'pressaoMaxima': {     
            'type' : 'Number',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'pressaoMinima': {     
            'type' : 'Number',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'frequenciaRespiratoria': {     
            'type' : 'Number',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'frequenciaCardiaca': {     
            'type' : 'Number',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'temperatura': {     
            'type' : 'Number',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'String',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        '::get::pessoaRegistro::sinalVital': {
          'url': ' /pessoaRegistros/:id/sinalVital',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'sinalVital' : 'sinalVital',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches hasOne relation sinalVital.'
       },
        '::create::pessoaRegistro::sinalVital': {
          'url': ' /pessoaRegistros/:id/sinalVital',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'sinalVital',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in sinalVital of this model.'
       },
        '::update::pessoaRegistro::sinalVital': {
          'url': ' /pessoaRegistros/:id/sinalVital',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'sinalVital',
            'isArray': false,
            'root': true 
          },
          'description': 'Update sinalVital of this model.'
       },
        '::destroy::pessoaRegistro::sinalVital': {
          'url': ' /pessoaRegistros/:id/sinalVital',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes sinalVital of this model.'
       }

    }
},
{
  'name' : 'PessoaMedicamento',
  'plural' : 'pessoaMedicamentos',
  'base' :  'Model',
  'idInjection' : true,
  'properties' : {
        'nome': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'descricao': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'imgMedicamento': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'String',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        '::get::pessoaRegistro::medicamento': {
          'url': ' /pessoaRegistros/:id/medicamento',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'refresh' : {'type' : 'boolean', 'placement' : 'query'},
          },
          'returns': {
           'medicamento' : 'pessoaMedicamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Fetches hasOne relation medicamento.'
       },
        '::create::pessoaRegistro::medicamento': {
          'url': ' /pessoaRegistros/:id/medicamento',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaMedicamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in medicamento of this model.'
       },
        '::update::pessoaRegistro::medicamento': {
          'url': ' /pessoaRegistros/:id/medicamento',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'pessoaMedicamento',
            'isArray': false,
            'root': true 
          },
          'description': 'Update medicamento of this model.'
       },
        '::destroy::pessoaRegistro::medicamento': {
          'url': ' /pessoaRegistros/:id/medicamento',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes medicamento of this model.'
       }

    }
},
{
  'name' : 'CadastroPessoa',
  'plural' : 'cadastroPessoas',
  'base' :  'PersistedModel',
  'idInjection' : true,
  'properties' : {
        'pessoa': {     
            'type' : 'pessoa',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'user': {     
            'type' : 'User',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'id': {     
            'type' : 'String',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        'create': {
          'url': ' /cadastroPessoas',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Create a new instance of the model and persist it into the data source.'
       },
        'patchOrCreate': {
          'url': ' /cadastroPessoas',
          'method': 'PATCH',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch an existing model instance or insert a new one into the data source.'
       },
        'replaceOrCreate': {
          'url': ' /cadastroPessoas/replaceOrCreate',
          'method': 'POST',
          'params': {
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace an existing model instance or insert a new one into the data source.'
       },
        'upsertWithWhere': {
          'url': ' /cadastroPessoas/upsertWithWhere',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Update an existing model instance or insert a new one into the data source based on the where criteria.'
       },
        'exists': {
          'url': ' /cadastroPessoas/:id/exists',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'exists' : 'boolean',
            'isArray': false,
            'root': false 
          },
          'description': 'Check whether a model instance exists in the data source.'
       },
        'findById': {
          'url': ' /cadastroPessoas/:id',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a model instance by {{id}} from the data source.'
       },
        'replaceById': {
          'url': ' /cadastroPessoas/:id/replace',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Replace attributes for a model instance and persist it into the data source.'
       },
        'find': {
          'url': ' /cadastroPessoas',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': true,
            'root': true 
          },
          'description': 'Find all instances of the model matched by filter from the data source.'
       },
        'findOne': {
          'url': ' /cadastroPessoas/findOne',
          'method': 'GET',
          'params': {
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Find first instance of the model matched by filter from the data source.'
       },
        'updateAll': {
          'url': ' /cadastroPessoas/update',
          'method': 'POST',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'info' : '[object Object]',
            'isArray': false,
            'root': true 
          },
          'description': 'Update instances of the model matched by {{where}} from the data source.'
       },
        'deleteById': {
          'url': ' /cadastroPessoas/:id',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'count' : 'object',
            'isArray': false,
            'root': true 
          },
          'description': 'Delete a model instance by {{id}} from the data source.'
       },
        'count': {
          'url': ' /cadastroPessoas/count',
          'method': 'GET',
          'params': {
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Count instances of the model matched by where from the data source.'
       },
        'prototype$patchAttributes': {
          'url': ' /cadastroPessoas/:id',
          'method': 'PATCH',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'cadastroPessoa',
            'isArray': false,
            'root': true 
          },
          'description': 'Patch attributes for a model instance and persist it into the data source.'
       },
        'createChangeStream': {
          'url': ' /cadastroPessoas/change-stream',
          'method': 'POST',
          'params': {
             'options' : {'type' : 'object', 'placement' : 'query'}
          },
          'returns': {
           'changes' : 'ReadableStream',
            'isArray': false,
            'root': false 
          },
          'description': 'Create a change stream.'
       }

    }
},
{
  'name' : 'ExameDetalhe',
  'plural' : 'exameDetalhes',
  'base' :  'Model',
  'idInjection' : false,
  'properties' : {
        'id': {     
            'type' : 'String',
            'required' : false,
            'isId' :  true,
            'isArray' :  false
        },
        'grupo': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        },
        'conteudo': {     
            'type' : 'String',
            'required' :  true,
            'isId' : false,
            'isArray' :  false
        },
        'icone': {     
            'type' : 'String',
            'required' : false,
            'isId' : false,
            'isArray' :  false
        }
    },
    'validations': [],
    'relations': {
        },
    'acls': [],
    'methods':
    {
        '::findById::examePreparo::detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo/:fk',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
           'result' : 'exameDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Find a related item by id for detalhePreparo.'
       },
        '::destroyById::examePreparo::detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo/:fk',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Delete a related item by id for detalhePreparo.'
       },
        '::updateById::examePreparo::detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo/:fk',
          'method': 'PUT',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'fk' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'result' : 'exameDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Update a related item by id for detalhePreparo.'
       },
        '::get::examePreparo::detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'filter' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'detalhePreparo' : 'exameDetalhe',
            'isArray': true,
            'root': true 
          },
          'description': 'Queries detalhePreparo of examePreparo.'
       },
        '::create::examePreparo::detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo',
          'method': 'POST',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'data' : {'type' : 'object', 'placement' : 'body'},
          },
          'returns': {
           'data' : 'exameDetalhe',
            'isArray': false,
            'root': true 
          },
          'description': 'Creates a new instance in detalhePreparo of this model.'
       },
        '::delete::examePreparo::detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo',
          'method': 'DELETE',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
          },
          'returns': {
 
          },
          'description': 'Deletes all detalhePreparo of this model.'
       },
        '::count::examePreparo::detalhePreparo': {
          'url': ' /examePreparos/:id/detalhePreparo/count',
          'method': 'GET',
          'params': {
             'id' : {'type' : 'any', 'placement' : 'path'},
             'where' : {'type' : 'object', 'placement' : 'query'},
          },
          'returns': {
           'count' : 'number',
            'isArray': false,
            'root': false 
          },
          'description': 'Counts detalhePreparo of examePreparo.'
       }

    }
}
]
}